//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
#include <Math/Artemis.VectorUtil.hpp>

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
namespace Artemis
{
namespace Math
{

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
float_t VectorUtil::Dot(Vector2 lhs, Vector2 rhs)
{
	return (lhs.X * rhs.X) + (lhs.Y * rhs.Y);
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
float_t VectorUtil::Cross(Vector2 lhs, Vector2 rhs)
{
	return (lhs.X * rhs.Y) - (lhs.Y * rhs.X);
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
Vector2 VectorUtil::Normalize(Vector2 rhs)
{
	const auto Len = Length(rhs);

	auto Out = rhs;
	if (Len > 0.0f)
	{
		Out *= 1.0f / Len;
	}

	return Out;
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
float_t VectorUtil::SquareLength(Vector2 value)
{
	return (value.X * value.X) + (value.Y * value.Y);
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
float_t VectorUtil::Length(Vector2 value)
{
	return sqrtf(SquareLength(value));
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
Vector2 VectorUtil::Min(Vector2 lhs, Vector2 rhs)
{
	return Vector2(
		std::min(lhs.X, rhs.X),
		std::min(lhs.Y, rhs.Y));
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
Vector2 VectorUtil::Max(Vector2 lhs, Vector2 rhs)
{
	return Vector2(
		std::max(lhs.X, rhs.X),
		std::max(lhs.Y, rhs.Y));
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
Vector2 VectorUtil::Lerp(Vector2 lhs, Vector2 rhs, float_t ratio)
{
	return Vector2(
		lhs.X + (rhs.X - lhs.X) * ratio,
		lhs.Y + (rhs.Y - lhs.Y) * ratio);
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
float_t VectorUtil::Dot(Vector3 lhs, Vector3 rhs)
{
	return (lhs.X * rhs.X) + (lhs.Y * rhs.Y) + (lhs.Z * rhs.Z);
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
Vector3 VectorUtil::Cross(Vector3 lhs, Vector3 rhs)
{
	return Vector3(
		(lhs.Y * rhs.Z) - (lhs.Z * rhs.Y),
		(lhs.Z * rhs.X) - (lhs.X * rhs.Z),
		(lhs.X * rhs.Y) - (lhs.Y * rhs.X));
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
Vector3 VectorUtil::Normalize(Vector3 rhs)
{
	const auto Len = Length(rhs);

	auto Out = rhs;
	if (Len > 0.0f)
	{
		Out *= 1.0f / Len;
	}

	return Out;
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
float_t VectorUtil::SquareLength(Vector3 value)
{
	return (value.X * value.X) + (value.Y * value.Y) + (value.Z * value.Z);
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
float_t VectorUtil::Length(Vector3 value)
{
	return sqrtf(SquareLength(value));
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
Vector3 VectorUtil::Min(Vector3 lhs, Vector3 rhs)
{
	return Vector3(
		std::min(lhs.X, rhs.X),
		std::min(lhs.Y, rhs.Y),
		std::min(lhs.Z, rhs.Z));
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
Vector3 VectorUtil::Max(Vector3 lhs, Vector3 rhs)
{
	return Vector3(
		std::max(lhs.X, rhs.X),
		std::max(lhs.Y, rhs.Y),
		std::max(lhs.Z, rhs.Z));
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
Vector3 VectorUtil::Lerp(Vector3 lhs, Vector3 rhs, float_t ratio)
{
	return Vector3(
		lhs.X + (rhs.X - lhs.X) * ratio,
		lhs.Y + (rhs.Y - lhs.Y) * ratio,
		lhs.Z + (rhs.Z - lhs.Z) * ratio);
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
float_t VectorUtil::Dot(Vector4 lhs, Vector4 rhs)
{
	return (lhs.X * rhs.X) + (lhs.Y * rhs.Y) + (lhs.Z * rhs.Z);
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
Vector4 VectorUtil::Cross(Vector4 lhs, Vector4 rhs)
{
	return Vector4(
		(lhs.Y * rhs.Z) - (lhs.Z * rhs.Y),
		(lhs.Z * rhs.X) - (lhs.X * rhs.Z),
		(lhs.X * rhs.Y) - (lhs.Y * rhs.X),
		1.0f);
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
Vector4 VectorUtil::Normalize(Vector4 rhs)
{
	const auto Len = Length(rhs);

	auto Out = rhs;
	if (Len > 0.0f)
	{
		Out.XYZ() *= 1.0f / Len;
	}

	Out.W = 1.0f;

	return Out;
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
float_t VectorUtil::SquareLength(Vector4 value)
{
	return (value.X * value.X) + (value.Y * value.Y) + (value.Z * value.Z);
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
float_t VectorUtil::Length(Vector4 value)
{
	return sqrtf(SquareLength(value));
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
Vector4 VectorUtil::Min(Vector4 lhs, Vector4 rhs)
{
	return Vector4(
		std::min(lhs.X, rhs.X),
		std::min(lhs.Y, rhs.Y),
		std::min(lhs.Z, rhs.Z),
		1.0f);
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
Vector4 VectorUtil::Max(Vector4 lhs, Vector4 rhs)
{
	return Vector4(
		std::max(lhs.X, rhs.X),
		std::max(lhs.Y, rhs.Y),
		std::max(lhs.Z, rhs.Z),
		1.0f);
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
Vector4 VectorUtil::Lerp(Vector4 lhs, Vector4 rhs, float_t ratio)
{
	return Vector4(
		lhs.X + (rhs.X - lhs.X) * ratio,
		lhs.Y + (rhs.Y - lhs.Y) * ratio,
		lhs.Z + (rhs.Z - lhs.Z) * ratio,
		1.0f);
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
}
}
