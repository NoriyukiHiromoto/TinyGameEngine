//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
#include "Artemis.Local.hpp"
#include "Artemis.Allocator.hpp"

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
namespace Artemis
{
namespace Memory
{

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
uint32_t Allocator::_MemorySizeInUse;

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
bool Allocator::Initialize()
{
	return true;
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
void Allocator::Uninitialize()
{
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
void* Allocator::Malloc(uint32_t Size, const char* pFileName, const uint32_t Line)
{
	if (Size == 0) return nullptr;

	const auto AlignedSize = (Size + 0xF) & ~0xF;

	auto pBlock = reinterpret_cast<MemoryBlock*>(malloc(AlignedSize + sizeof(MemoryBlock)));
	pBlock->Size = Size;
	pBlock->Line = Line;
	pBlock->pFileName = pFileName;

	_MemorySizeInUse += pBlock->Size;

	return pBlock + 1;
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
void Allocator::Free(void* pMemory)
{
	if (pMemory == nullptr) return;

	auto pBlock = reinterpret_cast<MemoryBlock*>(pMemory) - 1;

	_MemorySizeInUse -= pBlock->Size;

	free(pBlock);
}

//----------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------
}
}
